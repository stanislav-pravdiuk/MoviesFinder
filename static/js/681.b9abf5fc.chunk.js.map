{"version":3,"file":"static/js/681.b9abf5fc.chunk.js","mappings":"6LA2BA,UAvBA,WAEI,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACEE,EAAW,gBAAYF,EAAZ,qBAQrB,OANAG,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,GAAUF,GACLG,MAAK,SAAAC,GAAQ,OAAIP,EAAWO,EAASC,QAAxB,IACbC,OAAM,SAAAC,GAAWC,QAAQC,IAAIF,EAAQ,GAC7C,GAAE,CAACP,KAEG,0BACH,wBACKJ,EAAQc,KAAI,SAAAC,GACT,OAAO,yBACH,cAAGC,KAAMD,EAAOE,IAAhB,SAAsBF,EAAOG,UADjBH,EAAOI,GAG1B,OAGZ,C,6ECzBM,IAAMC,EAAQ,gCACRC,EAAO,kC,6DCELf,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBgB,GAAzB,iFACiBC,MAAM,GAAD,OAAIH,EAAAA,GAAJ,OAAeE,GAAf,OAAwBD,EAAAA,IAC7Bd,MAAK,SAAAC,GAAa,OAAOA,EAASgB,MAAO,IAF1D,0GAKA,I,SALyB,GAAVlB,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,sBCHf,SAASmB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOvB,GAEP,YADAiB,EAAOjB,EAET,CAEIsB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAO3B,KAAKsB,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["components/Reviews.jsx","services/api.js","services/fetchAPI.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport getMovies from \"services/fetchAPI\";\n\nfunction Reviews() {\n\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();\n        const fetchParams = `movie/${movieId}/reviews?api_key=`;\n\n    useEffect(() => {\n        getMovies(fetchParams)\n            .then(response => setReviews(response.results))\n            .catch(error => { console.log(error) });\n    }, [fetchParams]);\n    \n    return <div>\n        <ul>\n            {reviews.map(review => {\n                return <li key={review.id}>\n                    <a href={review.url}>{review.author}</a>\n                </li>\n            })}\n        </ul>\n    </div>\n};\n\nexport default Reviews;","export const BASE_URL = `https://api.themoviedb.org/3/`;\nexport const API_KEY = `acac49daeae449d51e6ac182f82d5604`;","import { BASE_URL } from \"./api\";\nimport { API_KEY } from \"./api\";\n\nasync function getMovies(params) {\n    return await fetch(`${BASE_URL}${params}${API_KEY}`)\n                .then(response => {return response.json()})\n};\n\nexport default getMovies;\n\n// `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n// `${BASE_URL}search/movie?api_key=${API_KEY}&query=terminator`\n// `${BASE_URL}movie/{movie_id}?api_key=${API_KEY}`\n// `${BASE_URL}movie/{movie_id}/credits?api_key=${API_KEY}`\n// `${BASE_URL}movie/{movie_id}/reviews?api_key=${API_KEY}`","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","reviews","setReviews","movieId","useParams","fetchParams","useEffect","getMovies","then","response","results","catch","error","console","log","map","review","href","url","author","id","BASE_URL","API_KEY","params","fetch","json","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}